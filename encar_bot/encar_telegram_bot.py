import os
import logging

import asyncio
import django
from asgiref.sync import sync_to_async
from aiogram import F, Bot, Dispatcher, types, Router
from aiogram.filters import BaseFilter
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters.command import Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mainmodule.settings")
django.setup()

from business_logic.telegram_tasks import save_client_task, request_api_car_info_task
from business_logic.controllers.utils import is_url

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger('db_logger')

TOKEN = os.environ.get('TELEGRAM_TOKEN')
router = Router()
storage = RedisStorage.from_url(os.environ.get('CELERY_BACKEND'))


class TextAndFilter(BaseFilter):
    def __init__(self, values):
        self.values = values

    async def __call__(self, message: types.Message):
        return message.text in self.values


@sync_to_async
def save_client(name=None, surname=None, patronymic=None, person_fio=None,
                date_of_birth=None, phone_number=None, telegram_chat_id=None,
                telegram_id=None, telegram_username=None, telegram_name=None,
                telegram_surname=None, email=None, background_image=None, address=None,
                addition_information=None):
    client_task = save_client_task.delay(name, surname, patronymic, person_fio, date_of_birth, phone_number,
                                         telegram_chat_id, telegram_id, telegram_username, telegram_name,
                                         telegram_surname, email, background_image, address,
                                         addition_information)

    logger.info(f'–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ - save_client_task, id - {client_task.task_id}')


@sync_to_async
def check_user_exist(telegram_id):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    return True


@sync_to_async
def request_car_from_message(message, telegram_id):
    request_car_task = request_api_car_info_task.delay(message, telegram_id)
    logger.info(f'–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ - request_api_car_info_task, id - {request_car_task.task_id}')


@sync_to_async
def start_menu_buttons():
    buttons = [
        [
            KeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã'),
            KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ'),
        ],
        [
            KeyboardButton(text='–ë–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫–∞'),
            KeyboardButton(text='–û —Å–∏—Å—Ç–µ–º–µ'),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def filter_menu_buttons():
    buttons = [
        [
            KeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤'),
            KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä'),
        ],
        [
            KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'),
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def cars_menu_buttons():
    buttons = [
        [
            KeyboardButton(text='–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—à–∏–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ VIN'),
            KeyboardButton(text='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—à–∏–Ω—ã'),
        ],
        [
            KeyboardButton(text='–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã'),
            KeyboardButton(text='–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω—ã'),
        ],
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def cars_analytic_menu_buttons():
    buttons = [
        [
            KeyboardButton(text='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã'),
            KeyboardButton(text='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π'),
        ],
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def head_menu_button():
    buttons = [
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


class RequestCarState(StatesGroup):
    request_car = State()


class RequestCarState(StatesGroup):
    request_car = State()


@router.message(F.text, Command("start"))
async def start_menu(message: Message, state: FSMContext):
    await state.clear()

    chat = message.chat
    chat_id = chat.id
    from_user = message.from_user
    telegram_id = from_user.id
    telegram_username = from_user.username
    telegram_name = from_user.first_name
    telegram_surname = from_user.last_name

    await save_client(telegram_chat_id=chat_id, telegram_id=telegram_id, telegram_name=telegram_name,
                      telegram_surname=telegram_surname, telegram_username=telegram_username)

    hello = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!'
    if not await check_user_exist(telegram_id):
        await message.answer(f'{hello}\n\n'
                             f'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞!',
                             parse_mode='HTML')

    if not telegram_username:
        if telegram_name:
            hello = f'<b>{telegram_name}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
        elif not telegram_name and telegram_surname:
            hello = f'<b>{telegram_surname}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
    else:
        hello = f'<b>{telegram_username}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'

    keyboard = await start_menu_buttons()

    await message.answer(f'{hello}\n\n'
                         'Encar System - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ä–µ–π—Å–∫–∏—Ö –º–∞—à–∏–Ω —Å —Å–∞–π—Ç–∞ Encar.\n\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –º–∞—à–∏–Ω—ã, –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω–µ, '
                         '–µ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ.\n\n'
                         '–ë–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω–∞—Ö, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ –ø–æ–∏—Å–∫—É\n\n'
                         '\n\n'
                         '–ü–æ–∫—É–ø–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–∏—Å—Ç–µ–º—ã!',
                         reply_markup=keyboard,
                         parse_mode='HTML')


@router.message(TextAndFilter(values={"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ", "/car"}))
async def cars_menu(message: Message):
    keyboard = await cars_menu_buttons()
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é',
                         reply_markup=keyboard, parse_mode='HTML')


@router.message(F.text("–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—à–∏–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ VIN"))
async def request_car_info(message: Message, state: FSMContext):
    keyboard = await cars_menu_buttons()
    await message.answer(f'–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ (encar.com/...&carid=00000000&...) –∏–ª–∏ VIN',
                         reply_markup=keyboard, parse_mode='HTML')
    await state.set_state(RequestCarState.request_car)


@router.message(F.text("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—à–∏–Ω—ã"))
async def request_car_info(message: Message, state: FSMContext):
    keyboard = await cars_analytic_menu_buttons()
    await message.answer(f'–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ (encar.com/...&carid=00000000&...) –∏–ª–∏ VIN',
                         reply_markup=keyboard, parse_mode='HTML')
    await state.set_state(RequestCarState.request_car)


@router.message(RequestCarState.request_car)
async def request_car_info_response(message: Message, state: FSMContext):
    from_user = message.from_user
    telegram_id = from_user.id

    await request_car_from_message(message.text, telegram_id)

    keyboard = await start_menu_buttons()
    await message.answer(
        text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
        reply_markup=keyboard
    )
    await state.clear()


@router.message(F.text('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def head_menu(message: Message, state: FSMContext):
    keyboard = await start_menu_buttons()

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ',
                         reply_markup=keyboard,
                         parse_mode='HTML')


async def main():
    bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
