import logging

from aiogram.types import Message
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot_logic.utils.states import RequestCarState
from bot_logic.utils.filters import TextAndFilter
from bot_logic.utils.additional_functions import (save_client, check_user_status, request_car, request_car_analytic,
                                                  request_car_insurance, request_car_diagnostic, request_analytic_cost,
                                                  request_analytic_damage)
from bot_logic.utils.keyboards import (start_menu_buttons, cars_menu_buttons, cars_analytic_menu_buttons,
                                       head_menu_button)

router = Router()
logger = logging.getLogger('db_logger')


@router.message(Command("start"))
async def start_menu(message: Message, state: FSMContext):
    await state.clear()

    chat = message.chat
    chat_id = chat.id
    from_user = message.from_user
    telegram_id = from_user.id
    telegram_username = from_user.username
    telegram_name = from_user.first_name
    telegram_surname = from_user.last_name

    await save_client(logger, telegram_chat_id=chat_id, telegram_id=telegram_id, telegram_name=telegram_name,
                      telegram_surname=telegram_surname, telegram_username=telegram_username)

    hello = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!'
    if not await check_user_status(telegram_id):
        await message.answer(f'{hello}\n\n'
                             f'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞!',
                             parse_mode='HTML')

    if not telegram_username:
        if telegram_name:
            hello = f'<b>{telegram_name}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
        elif not telegram_name and telegram_surname:
            hello = f'<b>{telegram_surname}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
    else:
        hello = f'<b>{telegram_username}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'

    keyboard = await start_menu_buttons(telegram_id)

    await message.answer(f'{hello}\n\n'
                         'Encar System - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ä–µ–π—Å–∫–∏—Ö –º–∞—à–∏–Ω —Å —Å–∞–π—Ç–∞ Encar.\n\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –º–∞—à–∏–Ω—ã, –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω–µ, '
                         '–µ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ.\n\n'
                         '–ë–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω–∞—Ö, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ –ø–æ–∏—Å–∫—É\n\n'
                         '\n\n'
                         '–ü–æ–∫—É–ø–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–∏—Å—Ç–µ–º—ã!',
                         reply_markup=keyboard,
                         parse_mode='HTML')


@router.message(TextAndFilter(values={"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ", "/car"}))
async def request_car(message: Message, state: FSMContext):
    keyboard = await head_menu_button()
    await message.answer(f'–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ (encar.com/...&carid=00000000&...) –∏–ª–∏ VIN',
                         reply_markup=keyboard, parse_mode='HTML')
    await state.set_state(RequestCarState.request_car)


@router.message(RequestCarState.request_car)
async def car_menu(message: Message, state: FSMContext):
    # TODO: –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—à–∏–Ω—ã —Ç—É—Ç —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ª–µ–≤–∞–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —É–∂–µ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    from_user = message.from_user
    telegram_id = from_user.id
    await state.update_data(request_car=message.text, telegram_id=telegram_id)

    keyboard = await cars_menu_buttons()
    await message.answer(
        text="–ú–∞—à–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=keyboard
    )
    await state.set_state(RequestCarState.action_type)


@router.message(RequestCarState.action_type, F.text("–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—à–∏–Ω—ã"))
async def request_car_info(message: Message, state: FSMContext):
    state_data = await state.get_data()
    telegram_id = state_data.get('telegram_id')
    car_id = state_data.get('request_car')

    keyboard = await cars_menu_buttons()
    chosen_state = RequestCarState.action_type
    answer_text = "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!"

    if message.text is "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—à–∏–Ω—ã":
        keyboard = await cars_analytic_menu_buttons()
        answer_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É'
        chosen_state = RequestCarState.request_analytic_type
    elif message.text is "–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—à–∏–Ω—ã":
        await request_car(logger, car_id, telegram_id)
    elif message.text is "–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã":
        await request_car_insurance(logger, car_id, telegram_id)
    elif message.text is "–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω—ã":
        await request_car_diagnostic(logger, car_id, telegram_id)

    await message.answer(text=answer_text, reply_markup=keyboard)
    await state.set_state(chosen_state)


@router.message(RequestCarState.request_analytic_type)
async def request_analytic(message: Message, state: FSMContext):
    state_data = await state.get_data()
    telegram_id = state_data.get('telegram_id')
    car_id = state_data.get('request_car')

    if message.text is "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã":
        await request_analytic_cost(logger, car_id, telegram_id)
    elif message.text is "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π":
        await request_analytic_damage(logger, car_id, telegram_id)

    keyboard = await cars_analytic_menu_buttons()
    await message.answer(
        text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
        reply_markup=keyboard
    )
    await state.set_state(RequestCarState.request_analytic_type)


@router.message(F.text('–ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ'))
async def back_car_menu(message: Message, state: FSMContext):
    keyboard = await cars_menu_buttons()

    await state.set_state(RequestCarState.action_type)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ', reply_markup=keyboard, parse_mode='HTML')


@router.message(F.text('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def head_menu(message: Message, state: FSMContext):
    from_user = message.from_user
    telegram_id = from_user.id
    keyboard = await start_menu_buttons(telegram_id)

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ', reply_markup=keyboard, parse_mode='HTML')
